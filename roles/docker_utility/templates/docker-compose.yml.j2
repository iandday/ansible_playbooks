# {{ ansible_managed }}

version: "3.6"
services:
  portainer:
    image: portainer/portainer-ce
    container_name: portainer
    restart: always
    command: -H unix:///var/run/docker.sock
    ports:
      - target: 9000
        published: 9002
        protocol: tcp
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ all_docker_storage }}/portainer/:/data
    environment:
      - TZ={{ docker_utility_timezone }}
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.portainer-secure.entrypoints=web-secure"
      - "traefik.http.routers.portainer-secure.rule=Host(`portainer.{{ all_ext_domain }}`)"
      - "traefik.http.routers.portainer-secure.tls=true"
      - "traefik.http.routers.portainer-secure.tls.certresolver=route53"
      - "traefik.http.routers.portainer-secure.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.portainer-secure.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.services.portainer-secure.loadbalancer.server.port=9000"
  mail:
    container_name: mail
    restart: always
    image: juanluisbaptiste/postfix:latest
    environment:
      - SMTP_SERVER=smtp.gmail.com
      - SMTP-PORT=587
      - SMTP_USERNAME={{ docker_utility_mail_username }}
      - SMTP_PASSWORD={{ docker_utility_mail_password }}
      - SERVER_HOSTNAME={{ docker_utility_mail_hostname }}
      - SMTP_NETWORKS={{ docker_utility_mail_networks }}
    networks:
      - default
    ports:
    - "25:25"
    labels:
      - "traefik.enable=false"
  authentik_postgresql:
    container_name: authentik_postgresql
    image: docker.io/library/postgres:16-alpine
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -d authentik -U authentik"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 5s
    volumes:
      - {{ all_docker_storage }}/authentik_db:/var/lib/postgresql/data
    environment:
      POSTGRES_PASSWORD: {{ vault_docker_utility_authentik_db_password }}
      POSTGRES_USER: authentik
      POSTGRES_DB: authentik
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=false"
  authentik_redis:
    container_name: authentik_redis
    image: docker.io/library/redis:alpine
    command: --save 60 1 --loglevel warning
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "redis-cli ping | grep PONG"]
      start_period: 20s
      interval: 30s
      retries: 5
      timeout: 3s
    volumes:
      - {{ all_docker_storage }}/authentik_redis:/data
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=false"
  authentik_server:
    container_name: authentik_server
    image: ghcr.io/goauthentik/server:2024.8.3
    restart: unless-stopped
    command: server
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: {{ vault_docker_utility_authentik_db_password }}
      AUTHENTIK_EMAIL__HOST: mail
      AUTHENTIK_EMAIL__PORT: 25
      AUTHENTIK_EMAIL__USE_TLS: "false"
      AUTHENTIK_EMAIL__USE_SSL: "false"
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_EMAIL__FROM: {{ vault_docker_utility_mail_username }}
      AUTHENTIK_SECRET_KEY: {{ vault_docker_utility_authentik_secret_key }}
    volumes:
      - {{ all_docker_storage }}/authentik_media:/media
      - {{ all_docker_storage }}/authentik_custom-templates:/templates
      - {{ all_docker_storage }}/traefik/certs/certs/ianday.me.crt:/certs/ianday.me.pem
      - {{ all_docker_storage }}/traefik/certs/private/ianday.me.key:/certs/ianday.me.key
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.authentik-secure.entrypoints=web-secure"
      - "traefik.http.routers.authentik-secure.rule=Host(`auth.{{ all_ext_domain }}`)"
      - "traefik.http.routers.authentik-secure.tls=true"
      - "traefik.http.routers.authentik-secure.tls.certresolver=route53"
      - "traefik.http.routers.authentik-secure.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.authentik-secure.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.services.authentik-secure.loadbalancer.server.port=9443"
      - "traefik.http.services.authentik-secure.loadbalancer.server.scheme=https"
      ## Individual Application forwardAuth regex (catch any subdomain using individual application forwardAuth)  
      - "traefik.http.routers.authentik-rtr-outpost.rule=HostRegexp(`{subdomain:[a-z0-9-]+}.{{ all_ext_domain }}`) && PathPrefix(`/outpost.goauthentik.io/`)"
      - "traefik.http.routers.authentik-rtr-outpost.entrypoints=web-secure"
      - "traefik.http.routers.authentik-rtr-outpost.tls=true"
      - "traefik.http.routers.authentik-rtr-outpost.tls.certresolver=route53"
      - "traefik.http.routers.authentik-rtr-outpost.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.authentik-rtr-outpost.tls.domains[0].sans=*.{{ all_ext_domain }}"
    depends_on:
      - authentik_postgresql
      - authentik_redis
  authentik_worker:
    container_name: authentik_worker
    image: ghcr.io/goauthentik/server:2024.8.3
    restart: unless-stopped
    command: worker
    environment:
      AUTHENTIK_REDIS__HOST: authentik_redis
      AUTHENTIK_POSTGRESQL__HOST: authentik_postgresql
      AUTHENTIK_POSTGRESQL__USER: authentik
      AUTHENTIK_POSTGRESQL__NAME: authentik
      AUTHENTIK_POSTGRESQL__PASSWORD: {{ vault_docker_utility_authentik_db_password }}
      AUTHENTIK_EMAIL__HOST: mail
      AUTHENTIK_EMAIL__PORT: 25
      AUTHENTIK_EMAIL__USE_TLS: "false"
      AUTHENTIK_EMAIL__USE_SSL: "false"
      AUTHENTIK_EMAIL__TIMEOUT: 10
      AUTHENTIK_EMAIL__FROM: {{ vault_docker_utility_mail_username }}
      AUTHENTIK_SECRET_KEY: {{ vault_docker_utility_authentik_secret_key }}   
    user: root
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
      - {{ all_docker_storage }}/authentik_media:/media
      - {{ all_docker_storage }}/authentik_certs:/certs
      - {{ all_docker_storage }}/authentik_custom-templates:/templates
      - {{ all_docker_storage }}/traefik/certs/certs/ianday.me.crt:/certs/ianday.me.pem
      - {{ all_docker_storage }}/traefik/certs/private/ianday.me.key:/certs/ianday.me.key
    depends_on:
      - authentik_postgresql
      - authentik_redis
      - authentik_server
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=false"
  dashy:
    container_name: dashy
    restart: always
    image: lissy93/dashy:latest
    volumes:
      - {{ all_docker_storage }}/dashy/dashy-config.yml:/app/user-data/conf.yml
    environment:
      - UID={{ docker_uid }}
      - GID={{ docker_gid }}
    healthcheck:
      test: ['CMD', 'node', '/app/services/healthcheck']
      interval: 1m30s
      timeout: 10s
      retries: 3
      start_period: 40s
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.dashy-secure.entrypoints=web-secure"
      - "traefik.http.routers.dashy-secure.rule=Host(`start.{{ all_ext_domain }}`)"
      - "traefik.http.routers.dashy-secure.tls=true"
      - "traefik.http.routers.dashy-secure.tls.certresolver=route53"
      - "traefik.http.routers.dashy-secure.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.dashy-secure.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.services.dashy-secure.loadbalancer.server.port=8080"
  secrets:
    container_name: secrets
    restart: always
    image: samueldg/snappass:latest
    user: "{{ docker_uid }}"
    stop_signal: SIGINT
    environment:
      - REDIS_HOST=redis
      - NO_SSL=True
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.secrets-secure.entrypoints=web-secure"
      - "traefik.http.routers.secrets-secure.rule=Host(`secrets.{{ all_ext_domain }}`)"
      - "traefik.http.routers.secrets-secure.tls=true"
      - "traefik.http.routers.secrets-secure.tls.certresolver=route53"
      - "traefik.http.routers.secrets-secure.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.secrets-secure.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.services.secrets-secure.loadbalancer.server.port=5000"
  redis:
    container_name: redis
    restart: always
    image: redis:latest
    command: sh -c "rm -f /data/dump.rdb && redis-server"
    user: "{{ docker_uid }}"
    networks:
      - traefik_proxy
  watchtower:
    container_name: watchtower
    hostname: watchtower
    restart: always
    image: v2tec/watchtower
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --schedule "0 0 4 * * *" --cleanup
  duo_auth:
    container_name: duo_auth
    restart: always
    image: jumanjiman/duoauthproxy:latest
    volumes:
      - {{ all_docker_storage }}/duo:/opt/duoauthproxy/conf/
      - {{ all_docker_storage }}/logs/duo:/opt/duoauthproxy/log/
    ports:
      - "1812:1812"
      - "18120:18120"
    user: "{{ docker_uid }}"
    networks:
      - traefik_proxy
  which_plates:
    container_name: which_plates
    restart: always
    image:  ghcr.io/iandday/whichplates_api:latest
    networks:
      - traefik_proxy
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.whichplates-secure.entrypoints=web-secure"
      - "traefik.http.routers.whichplates-secure.rule=Host(`whichplates.{{ all_ext_domain }}`)"
      - "traefik.http.routers.whichplates-secure.tls=true"
      - "traefik.http.routers.whichplates-secure.tls.certresolver=route53"
      - "traefik.http.routers.whichplates-secure.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.whichplates-secure.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.services.whichplates-secure.loadbalancer.server.port=80"
  bitwarden:
    hostname: bitwarden
    image: vaultwarden/server:latest
    container_name: bitwarden
    restart: always
    volumes:
      - {{ all_docker_storage }}/bitwarden:/data/
      - {{ all_docker_storage }}/logs/bitwarden:/log/
    environment:
      - uid={{ docker_uid }}
      - gid={{ docker_gid }}
      - WEBSOCKET_ENABLED=true
      - EXTENDED_LOGGING=false
      - LOG_FILE=/log/bitwarden.log
      - SIGNUPS_ALLOWED=false
      - ADMIN_TOKEN={{ docker_utility_bitwarden_admin_token }}
      - DOMAIN=https://vault.{{ all_ext_domain }}
      - DUO_IKEY={{ docker_utility_bitwarden_duo_ikey }}
      - DUO_SKEY={{ docker_utility_bitwarden_duo_skey }}
      - DUO_HOST={{ docker_utility_bitwarden_duo_api }}
      - DUO_ENABLED=true
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.bitwarden-ui.entrypoints=web-secure"
      - "traefik.http.routers.bitwarden-ui.rule=Host(`vault.{{ all_ext_domain }}`)"
      - "traefik.http.routers.bitwarden-ui.tls=true"
      - "traefik.http.routers.bitwarden-ui.tls.certresolver=route53"
      - "traefik.http.routers.bitwarden-ui.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.bitwarden-ui.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.routers.bitwarden-ui.service=bitwarden-ui"
      - "traefik.http.services.bitwarden-ui.loadbalancer.server.port=80"
      - "traefik.http.routers.bitwarden-ws.entrypoints=web-secure"
      - "traefik.http.routers.bitwarden-ws.rule=Host(`vault.{{ all_ext_domain }}`) && Path(`/notifications/hub`)"
      - "traefik.http.routers.bitwarden-ws.tls=true"
      - "traefik.http.routers.bitwarden-ws.tls.certresolver=route53"
      - "traefik.http.routers.bitwarden-ws.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.bitwarden-ws.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.routers.bitwarden-ws.service=bitwarden-ws"
      - "traefik.http.services.bitwarden-ws.loadbalancer.server.port=3012"
    networks:
      - traefik_proxy

  traefik:
    hostname: traefik
    image: traefik:v2.10
    container_name: traefik
    restart: always
    domainname: {{ all_ext_domain }}
    networks:
      - default
      - traefik_proxy
    ports:
      - "80:80"
      - "443:443"
      - "3012:3012"
    environment:
      - AWS_ACCESS_KEY_ID={{ vault_docker_utility_aws_id }}
      - AWS_SECRET_ACCESS_KEY={{ vault_docker_utility_aws_key }}
      - AWS_REGION=us-east-1
      - AWS_HOSTED_ZONE_ID={{ vault_docker_utility_aws_zone_id }}
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.traefik.entrypoints=web-secure"
      - "traefik.http.routers.traefik.rule=Host(`traefik.{{ all_ext_domain }}`)"
      - "traefik.http.routers.traefik.tls=true"
      - "traefik.http.routers.traefik.tls.certresolver=route53"
      - "traefik.http.routers.traefik.tls.domains[0].main={{ all_ext_domain }}"
      - "traefik.http.routers.traefik.tls.domains[0].sans=*.{{ all_ext_domain }}"
      - "traefik.http.routers.traefik.service=api@internal"
      - "traefik.http.routers.traefik.middlewares=auth"
      - "traefik.http.middlewares.auth.basicauth.users={{ docker_utility_trafik_dashboard_auth }}"
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock:ro
      - {{ all_docker_storage }}/traefik:/etc/traefik
      - {{ all_docker_storage }}/logs/traefik:/logs/
  traefik-certs-dumper:
    image: ldez/traefik-certs-dumper:v2.8.3
    entrypoint: sh -c '
      apk add jq
      ; while ! [ -e /data/acme.json ]
      || ! [ `jq ".[] | .Certificates | length" /data/acme.json` != 0 ]; do
      sleep 1
      ; done
      && traefik-certs-dumper file --version v2 --watch
      --source /data/acme.json --dest /data/certs'
    volumes:
      - {{ all_docker_storage }}/traefik:/data
networks:
  traefik_proxy:
    external:
      name: traefik_proxy
  default:
    driver: bridge

