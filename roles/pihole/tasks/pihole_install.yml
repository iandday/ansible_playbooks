---
#
# roles/pihole/tasks/pihole_install.yml
#

- name: update apt cache and install required packages
  become: true
  apt: 
    name: '{{ pihole_apt_packages }}'
    state: present
    update_cache: yes

- name: install cloudflared
  become: true
  apt:
    deb: '{{ pihole_cloudflared_deb_url }}'
    state: present

- name: create pihole group
  become: True
  group:
    name: '{{ pihole_group }}'
    state: present

- name: create pihole user
  become: true
  user:
    create_home: no
    name: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    shell: '/usr/sbin/nologin'

- name: download installer
  become: true
  get_url:
    url: '{{ pihole_installer_url }}'
    dest: '{{ pihole_installer_path }}'
    mode: '0740'
    owner: root

- name: Create pihole configuration directory
  become: True
  file:
    name: '{{ pihole_config_path }}'
    state: directory
    owner: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    mode: 0755

- name: Create pihole configuration
  become: True
  template:
    src: 'setupVars.conf.j2'
    dest: '{{ pihole_config_path }}/setupVars.conf'
    owner: root
    group: root
    mode: 0644


# - name: Set default DNS
#   become: True
#   template:
#     src="etc_resolf.conf.j2"
#     dest="/etc/resolv.conf"
#     owner=root
#     group=root
#     mode=0644
#   tags: admin

- name: Install Pi-Hole
  become: true
  command: 
    cmd: '{{ pihole_installer_path }} --unattended'
    creates: '{{ pihole_config_path }}/install.log'

- name: Set PiHole to update every week
  become: True
  replace:
    path: /etc/cron.d/pihole
    regexp: '^#(.*updatePihole.*)$'
    replace: '\1'
    backup: yes

- name: copy cloudflared config
  become: true
  template: 
    src: cloudflared.j2
    dest: '/etc/default/cloudflared'
    owner: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    mode: 0600

- name: set permissions for cloudflared
  become: True
  file:
    path: '/usr/local/bin/cloudflared'
    owner: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    mode: 0700

- name: copy cloudflared service file
  become: true
  template: 
    src: cloudflared.service.j2
    dest: '/lib/systemd/system/cloudflared.service'
    owner: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    mode: 0600

- name: start cloudflared at boot
  become: True
  systemd:
    name: cloudflared
    state: started
    enabled: true

- name: increase pihole logging
  become: True
  ansible.builtin.lineinfile:
    path: '/etc/dnsmasq.d/99-pihole-log-facility.conf'
    line: 'log-queries=extra'
    owner: root
    group: root
    mode: 0644
    create: yes
    state: present
  notify: restart pihole

- name: copy syslog-ng config files
  become: true
  template:
    src: '{{ item }}.j2'
    dest: '/etc/syslog-ng/conf.d/{{ item }}'
    owner: root
    group: root
    mode: 0644
  with_items:
    - pihole.conf
    - pihole-FTL.conf
  notify: restart syslog

- name: create backup directory
  file:
    path: '{{ all_backup_root }}'
    state: directory 
    owner: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    mode: 0700
  become: true

- name: mount backup share
  include_role:
    name: common
    tasks_from: mount_share
  vars:
    mount_src:  '{{ all_nas_backup }}'
    mount_dest: '{{ all_backup_root }}'
    mount_username: '{{ pihole_service_username }}'
    mount_password: '{{ pihole_service_password }}'
    mount_uid: '{{ pihole_uid }}'
    mount_gid: '{{ pihole_gid }}'
    mount_options: ',file_mode=0700,dir_mode=0700,nounix'
  no_log: true

- name: create pihole backup directory 
  file:
    path: '{{ pihole_backup_dir }}'
    state: directory 
    owner: '{{ pihole_user }}'
    group: '{{ pihole_group }}'
    mode: 0700
  become: true

- name: copy backup script
  template:
    src: backup_pihole.sh.j2
    dest: /usr/local/bin/backup_pihole.sh
    mode: 'a+x'
  become: true

- name: setup backup cronjob
  cron:
    name: 'Backup pihole'
    job: '/usr/local/bin/backup_pihole.sh'
    user: root
    cron_file: backup_pihole
    hour: '3'
    minute: '5'
  become: true

- name: configure backup rotation
  include_role:
    name: common
    tasks_from: rotate_backups
  vars:
    - cron_user: root
    - backup_path: '{{ pihole_backup_dir }}'